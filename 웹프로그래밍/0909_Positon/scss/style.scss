@import "reset";
// //sass --watch D:\workspace\웹프로그래밍\0909_Positon\scss\style.scss:D:\workspace\웹프로그래밍\0909_Positon\css\style.css


//////////////////// POSITION 실습
// main {
//     width: 1000px;
//     border: 1px solid black;
//     margin: 100px auto;
//     display: flex;
//     flex-wrap: wrap;
//     // position: relative;  //부모요소에 위치하게되므료 자식요소에 배치하기 ($ 표시한 부분)

//     .left {
//         width: 50%;     
//         // 500에서 변경한 이유
//         // border 값이 1px씩 가져가서 실질적 main width가 998px . 그래서 50,%로 변경
//         height: 500px;
//         background-color: lightblue;
//     }

//     .right {
//         width: 50%;
//         height: 500px;
//         background-color: lightgreen;
//         position: relative; // ($)

//         .box1{
//             width: 100px;
//             height: 100px;
//             background-color: blue;
//             position: absolute;
//             right: 50px;
//             bottom: 20px;
//             z-index: 2;
//         }
//         .box2{
//             width: 100px;
//             height: 100px;
//             background-color: red;
//             position: absolute;
//             right: 80px;
//             bottom: 80px;
//             z-index: 1;
//              // 나중에 입력한 게 먼저 입력한 박스 위에 위치
//              // z-index를 통해 앞 뒤 배치 변경 가능 (숫자가 클 수록 앞)
//         }
//     }

//     .bottom {
//         width: 100%;
//         height: 200px;
//         background-color: pink;
//     }
// }

// /*
//     position :  특정요소를 가로, 세로, 좌표값을 정해서 원하는 위치에 배치
//     relative : 자신의 원래 위치값을 고수하면서 상대적으로 배치
//     absolute : 부모요소(position 적용되어 있는)를 기준으로 절대값 좌표값을 설정해 배치
//     fixed : 절대위치값 배치는 absolute와 동일하나 기준점이 무조건 브라우저

//     absolute, fixed는 화면상에서 해당 속성이 적용된 요소를 강제로 뜯어낸 뒤 자표괎 위치에 얹어놓픈 형태이기 때문에
//     fixed, absolute는 flex,float가 설정되어 있늨 큰 레이아웃 요소에 설정하는 것이 아닌 그 안쪽의 자잘한 요소들을 자유롭게 배치하고 싶을 때 사용

//     relative는 absolute가 적용돈 자식 요소의 기준점 설정할 때 주로 많이 쓰임
// */




//////////////////// VW, VH VMAX, VMIN 실습
// div {
//     background-color: pink;
//     width: 100px;
//     height: 100px;
//     margin: 50px;
//     display: flex;
//     justify-content: center;
//     align-items: center;
// }
// .box1 {
//     width: 1vw;
// }
// .box2 {
//     height: 1vh;
// }
// .box3 {
//     width: 1vmax;
// }
// .box4 {
//     width: 1vmin;
// }

// /*
//     vw (viewport width) : 현재 화면의 너비를 100등분한 단위
//     vh (viewport height) : 현재 화면의 높이를 100등분한 단위
//     vmax (viewport max) : 화면의 너비,높이중 긴 변을 기준으로 100등분한 단위
//     vmin (viewport min) : 화면의 너비, 높이중 작은 변을 기준으로 100등분한 단위


//     % vs vw,vh 차이점
//     % : 현재 자식 요소의 직계 부모 기준으로 설정
//     vw,vh: 현재 요소의 위치 상관없이 무조건 브라우저 기준 설정
// */




//////////////////// 실습
// main{
//     width: 100%;
//     height: 100vh;
//     background-color: green;

//     div{
//         width: 234px;
//         height: 123px;
//         background-color: black;
//         position: absolute;
//         top: 50%;
//         // margin-top: -300px; //가로세로 정중앙배치
//         left: 50%;
//         // margin-left: -300px; //가로세로 정중앙배치
//         transform: translate(-50%, -50%);  
//         /*
//         가로세로 정중앙배치
//         margin-top: -300px;
//         margin-left: -300px;
//         와 같은 설정
//         */
//     }
// }








//////////////////// media-query 실습

main {
    width: 100%;
    height: 100vh;
    background-color: green;

    div {
    width: 234px;
    height: 123px;
    background-color: black;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    }
}
  //999이하일때 아래 구문 덮어쓰기해서 적용
@media screen and (max-width: 1500px) {
    main {
        div {
            background-color: #555;
        }
    }
}
  //599이하일때 다시 아래 구문 덮어쓰기해서 적용
@media screen and (max-width: 1000px) {
    main { 
        div {
        background-color: #999;
        }
    }
}