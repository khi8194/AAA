@import "reset";

div{
    width: 300px;
    height: 300px;
    margin: 100px;
}

.box1{
    width: 300px;
    height: 300px;
    background-color: blue;
    margin: 100px;
    //전환효과를 지정할 css 속성명 지정
    transition-property: background-color;

    //전환효과가 발생할 지속시간 (1000ms -> 1초)
    //전환효과가 hover가 발생하기 전 원본 요소에 지정 
    transition-duration: 2000ms; //(500ms = 0.5s)

    &:hover{
        background-color: red;
    }
}

.box2{
    background-color: green;
    transition-property: transform, opacity;
    transition-duration: 500ms;
    //지연시간
    transition-duration: 1s;

    &:hover{
        // transform: scale(1.5);
        // transform: rotate(360deg);  
        // // rotate가 scale을 덮어서 scale이 실행이 안됨

        transform: scale(1.5) rotate(360deg);  
        //한번에 복수개의 transform 효과를 적용시에는 빈칸 띄우고 여러구문 입력 가능
        opacity: 0;
    }
}

.box3{
    background-color: red;
    // transition-property: background-color;
    // transition-duration: 1000ms;
    // transition-delay: 500ms;
    // transition: background-color 1s 0s, transform 1s 1s;

    // 아래 transition 구문은 hover 시 적용
    transition: background-color 1s 1s, transform 1s 0s;

    &:hover{ //진행하기 전의 상태를 미리 설정
        background-color: hotpink;
        transform: rotate(360deg);
        // hver out 시 적용되는 구문
        transition: background-color 1s 0s, transform 1s 1s;
    }

    // transition: background-color 1s 0s, transform 1s 1s;

    // &:hover{
    //     background-color: violet;
    //     transform: rotate(360deg);
    // }
}

.box4{
    border: 1px solid black;

    .inner  {
        width: 100%;
        height: 100%;
        background: blue;
        opacity: 0.5;
        transition: all 1s;

        //변형이 일어나는 요소에 직접 :hover를 걸면
        //변형 도중 요소가 마우스 포인터 위치에서 벗어나는 경우 모션이 깨짐
        //부모 틀에 hover를 설정하는 것이 권장됨
        &:hover{
            transform: rotateY(360deg);
        }
    }
}

//호버 모션 적용시 호버는 항상 모양이 변하지 않는 부모요소에 설정
//모션변형이 일어나는 자식요소에 직접 :hover설정을 하면 마우스호버 영역확보 불가
.box5{
    border: 1px solid black;
    perspective: 600px;

    .inner  {
        width: 100%;
        height: 100%;
        background: blue;
        opacity: 0.5;
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-size: 1.5em;
        transition: all 1s;      
        
        span{
            transform: translateX(100px);
            opacity: 0;
            transition: all 0.5s 1s;
        }
    }
    &:hover{
        .inner{
            transform: rotate(360deg);

            span{
                transform: translateX(0px);
                opacity: 1;
            }
        }
    }
}





// .wrap{
//     width: 1000px;
//     // width: 2500px;
//     border: 1px solid red;
//     margin: 100px auto;
//     padding: 50px;
//     display: flex;
//     flex-wrap: wrap;
//     justify-content: center;
//     align-content: center;
//     gap: 30px;

//     .box{
//         width: 230px;
//         height: 230px;
//         border: 1px solid black;
//         //원근감 강제 적용
//         //수치값은 현재 시점과 물체사이의 거리를 나타냄
//         //수치값이 작아질수록 물체의 왜곡이 커지고
//         //수치값이 커질수록 물체의 왜곡 정도가 완만해짐
//         perspective: 500px; //3000pxpx;

//         .inner{
//             width: 100%;
//             height: 100%;
//             background-color: blue;
//             opacity: 0.5; // 요소의 투명도 지정 (rgba와 다르게 요소 자체를 투명도 처리)
//         }

//         &:nth-of-type(1){
//             .inner {
//                 // y축을 기준으로 45도만큼 3d형태로 회전한 것은 맞지만
//                 // 화면상에는 입체감이 나타나지 않음
//                 // transform: rotate(45deg);
//                 transform: rotateY(45deg);
//             } 
//         }
//         &:nth-of-type(2){
//             .inner {
//                 transform: rotateX(60deg);
//             } 
//         }
//         &:nth-of-type(3){
//             .inner {
//                 // 확대는 아니지만 내쪽으로 당겨서 보일 수 있게
//                 // transform: translateZ(200px);
//                 // 축소는 아니지만 내쪽에서 멀어져 보일 수 있게
//                 transform: translateZ(-200px);
//             } 
//         }
//         &:nth-of-type(4){
//             .inner {
//                 transform-origin: left center;
//                 transform: rotateY(45deg);
//             } 
//         }
//         &:nth-of-type(5){
//             .inner {
//                 transform-origin: center bottom;
//                 transform: rotateX(60deg);
//             } 
//         }
//         &:nth-of-type(6){
//             .inner {
//                 // transform-origin: right top;
//                 transform: translateZ(-800px);
//             } 
//         }

//     //     &:nth-of-type(1){
//     //         transform: skewX(-30deg);
//     //     }
//     //     &:nth-of-type(10){
//     //         transform: translateX(-70px);
//     //     }
//     //     &:nth-of-type(19){
//     //         transform: skewX(30deg);
//     //     }
//     //     &:nth-of-type(39){
//     //         transform: skewX(-30deg);
//     //     }
//     }
// }